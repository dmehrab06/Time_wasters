std::string digitalNumber(int k) {

  std::string ans;
  int M = 20;
  int sum = 0;
  while (k >= M) {
    ans += '1';
    k -= 2;
    sum++;
  }
  sum %= 3;

  int seg[10] = {6, 2, 5, 5, 4, 5, 6, 3, 7, 6};
  /*
   * dp[i][j] - the largest number that is obtainable from j segments
   * and that has i as a remainder after division by 3.
   */
  std::vector<std::vector<int>> dp(3, std::vector<int>(M));
  dp[0][0] = 0;
  dp[1][0] = dp[2][0] = -1;
  for (int i = 1; i < M; i++) {
    for (int j = 0; j < 3; j++) {
      dp[j][i] = -1;
      for (int d = 0; d < 10; d++) {
        int pSum = (j - d + 9) % 3;
        int pSegmCnt =  i - seg[d] ;
        if (pSegmCnt < 0 || dp[pSum][pSegmCnt] == -1) {
          continue;
        }
        int cur = dp[pSum][pSegmCnt] == 0 ? d :
            std::stoi(std::to_string(d) + "" + std::to_string(dp[pSum][pSegmCnt]));
        dp[j][i] = dp[j][i] != -1 ? std::max(dp[j][i], cur): cur;
      }
    }
  }

  return std::to_string(dp[(3 - sum) % 3][k]) + ans;
}

