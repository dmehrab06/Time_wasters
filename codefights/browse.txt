int cacheJumping(std::vector<int> history, int user,
                  std::vector<std::string> actions) {

  struct Node {
    int score;
    Node *prev, *next;

    Node(int score) : score(score), prev(nullptr), next(nullptr) { }

    ~Node() {}

    void append(Node *node) {
      next = node;
      node->prev = this;
    }

    void remove() {
      if (prev) {
        prev->next = next;
      }
      if (next) {
        next->prev = prev;
      }
    }
  };

  Node *userNode = nullptr,
      *tailNode = new Node(0);
  for (int i = 0; i < history.size(); i++) {
    tailNode->append(new Node(history[i]));
    tailNode = tailNode->next;
    if (i == user) {
      userNode = tailNode;
    }
  }

  int totalScore = userNode->score;
  for (int i = 0; i < actions.size(); i++) {
    std::stringstream action(actions[i]);
    std::string actionType;
    int x;
    action >> actionType >> x;
    if (actionType == "Open") {
      tailNode->append(new Node(x));
      tailNode = tailNode->next;
    } else {
      userNode->remove();
      if (tailNode == userNode) {
        tailNode = tailNode->prev;
      }
      while (x > 0) {
        if (actionType == "Undo") {
          userNode = userNode->prev;
        } else {
          userNode =  userNode->next ;
        }
        x--;
      }
      totalScore += userNode->score;
    }
  }

  return totalScore;
}

