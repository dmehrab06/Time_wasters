std::vector<std::vector<int>> blackAndWhiteBoard(int h, int w,
                                            std::vector<std::string> queries) {

  typedef std::vector<int> vi;
  typedef std::vector<vi> v2i;
  typedef std::vector<v2i> v3i;
  typedef std::vector<v3i> v4i;
  vi dx = {0, -1, 0, 1};
  vi dy = {1, 0, -1, 0};
  std::string directions = ">^<v";

  v4i next(h, v3i(w, v2i(4)));
  for (int i = 0; i < h; i++) {
    for (int j = 0; j < w; j++) {
      for (int k = 0; k < 4; k++) {
        int i2 = i + dx[k];
        int j2 = j + dy[k];
        if (i2 < 0 || j2 < 0 || i2 >= h || j2 >= w) {
          i2 = -1;
          j2 = -1;
        }
        next[i][j][k] = {i2, j2};
      }
    }
  }

  v2i ans;
  for (int i = 0; i < queries.size(); i++) {
    std::stringstream iss(queries[i]);
    std::string q0;
    int a, b;
    iss >> q0 >> a >> b;
    if (q0 == "x") {
      for (int k = 0; k < 4; k++) {
        vi prev = next[a][b][(k + 2) % 4];
        if (prev[0] == -1) {
          continue;
        }
        next[prev[0]][prev[1]][k] = next[a][b][k];
      }
    } else {
     int k = directions.find(q0[0]);
      ans.push_back(next[a][b][k]);
    }
  }

  return ans;
}

