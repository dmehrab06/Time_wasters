std::string closestLocation(std::string address, std::vector<std::vector<int>> objects,
                            std::vector<std::string> names) {
  struct Helper {
    int getSqrDistance(std::vector<int> object) {
      if (object.size() == 2) {
        return object[0]*object[0]+object[1]*object[1] ;
      }
      if (object[0] == object[2]) {
        if (object[1] * object[3] <= 0) {
          return object[0] * object[0];
        }
      }
      else {
        if (object[0] * object[2] <= 0) {
          return object[1] * object[1];
        }
      }
      return std::min(object[0] * object[0] + object[1] * object[1],
                      object[2] * object[2] + object[3] * object[3]);
    }

    bool isSimilar(std::string str1, std::string str2) {
      int differentChars = 0;
      int insertions = 0;
      int deletions = 0;
      std::transform(str1.begin(), str1.end(), str1.begin(), ::tolower);
      std::transform(str2.begin(), str2.end(), str2.begin(), ::tolower);
      for (int i = 0; i < str1.size(); i++) {
        if (i >= str2.size() || str1[i] != str2[i]) {
          differentChars++;
        }
      }
      for (int i = 0, j = 0; i < str1.size(); j++) {
        if (j >= str2.size()) {
          insertions = 2;
          break;
        }
        if (str1[i] == str2[j]) {
          i++;
        }
        else {
          insertions++;
          if (insertions > 1) {
            break;
          }
        }
      }
      for (int i = 0, j = 0; i < str1.size(); i++) {
        if (j < str2.size() && str1[i] == str2[j]) {
          j++;
        }
        else {
          deletions++;
        }
      }
      return differentChars <= 1 || insertions <= 1 || deletions <= 1;
    }
  };

  Helper h;
  int bestIndex = -1;
  int bestDistance = 0;
  for (int i = 0; i < names.size(); i++) {
    if (h.isSimilar(address, names[i])) {
      int sqrDistance = h.getSqrDistance(objects[i]);
      if (bestIndex == -1 || bestDistance > sqrDistance) {
        bestDistance = sqrDistance;
        bestIndex = i;
      }
    }
  }
  return names[bestIndex];
}

